// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Banco de dados principal (painel administrativo)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Definições de modelos para o banco principal
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String?
  role      String?   @default("user")
  active    Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Os modelos abaixo representam as tabelas do viralizamos_orders
// Esses dados serão acessados via API GraphQL do serviço de Orders
model Order {
  id              String       @id @default(uuid())
  userId          String       @map("user_id")
  serviceId       String       @map("service_id")
  providerId      String       @map("provider_id")
  transactionId   String?      @map("transaction_id")
  providerOrderId String?      @map("provider_order_id")
  quantity        Int
  price           Int
  status          String       @default("pending")
  apiResponse     Json?        @map("api_response")
  errorMessage    String?      @map("error_message")
  retryCount      Int          @default(0) @map("retry_count")
  lastCheck       DateTime?    @map("last_check")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  reposicoes      Reposicao[]

  @@map("orders")
}

model Provider {
  id        String   @id @default(uuid())
  name      String
  apiKey    String?  @map("api_key")
  apiUrl    String?  @map("api_url")
  type      String
  status    String   @default("active")
  balance   Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("providers")
}

model Service {
  id            String   @id @default(uuid())
  providerId    String   @map("provider_id")
  providerCode  String?  @map("provider_code")
  name          String
  description   String?
  minQuantity   Int      @default(1) @map("min_quantity")
  maxQuantity   Int?     @map("max_quantity")
  price         Int
  cost          Int?
  active        Boolean  @default(true)
  categoryId    String?  @map("category_id")
  externalId    String?  @map("external_id")
  requiredFields Json?   @map("required_fields")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("services")
}

// Modelo para reposições
model Reposicao {
  id                String     @id @default(uuid())
  orderId           String     @map("order_id")
  order             Order      @relation(fields: [orderId], references: [id])
  motivo            String
  observacoes       String?
  status            String     @default("pendente")
  resposta          String?
  tentativas        Int        @default(0)
  dataSolicitacao   DateTime   @default(now()) @map("data_solicitacao")
  dataProcessamento DateTime?  @map("data_processamento")
  processadoPor     String?    @map("processado_por")
  
  @@map("reposicoes")
}

// Os modelos abaixo representam as tabelas do viralizamos_pagamentos_novo
// Esses dados serão acessados via API GraphQL do serviço de Pagamentos
model Transacao {
  id               String    @id @default(uuid())
  clienteId        String    @map("cliente_id")
  produtoId        String    @map("produto_id")
  valor            Int
  status           String    @default("pendente")
  metodoPagamento  String    @map("metodo_pagamento")
  gatewayId        String?   @map("gateway_id")
  gatewayResponse  Json?     @map("gateway_response")
  orderId          String?   @map("order_id")
  codigoRastreio   String?   @map("codigo_rastreio")
  dataCriacao      DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao  DateTime  @updatedAt @map("data_atualizacao")

  @@map("transacoes")
}

model Usuario {
  id           String    @id @default(uuid())
  nome         String
  email        String    @unique
  telefone     String?
  endereco     String?
  cidade       String?
  estado       String?
  cep          String?
  pais         String?   @default("Brasil")
  ativo        Boolean   @default(true)
  ultimoLogin  DateTime? @map("ultimo_login")
  dataCriacao  DateTime  @default(now()) @map("data_criacao")

  @@map("usuarios")
}

model Produto {
  id           String   @id @default(uuid())
  nome         String
  descricao    String?
  preco        Int
  tipo         String   @default("digital")
  categoriaId  String?  @map("categoria_id")
  ativo        Boolean  @default(true)
  dataCriacao  DateTime @default(now()) @map("data_criacao")

  @@map("produtos")
} 