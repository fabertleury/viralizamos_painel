import { Pool } from 'pg';
import { analyticsPool, obterPedidos, obterPedidoPorId, Pedido as AnalyticsPedido } from './analyticsService';

// Impede erros durante o processo de build
const isServerSide = typeof window === 'undefined';

// Log das variáveis de ambiente para depuração
console.log('Variáveis de ambiente:');
console.log('- ANALYTICS_DATABASE_URL definido:', !!process.env.ANALYTICS_DATABASE_URL);
console.log('- DATABASE_URL definido:', !!process.env.DATABASE_URL);

// Agora usamos o pool do serviço de Analytics
export const ordersPool = analyticsPool;

console.log('Pool de conexão Analytics inicializado:', !!analyticsPool);

// Interface para pedidos
export interface Pedido {
  id: string;
  data_criacao: Date;
  provedor_id: string;
  provedor_nome: string;
  produto_id: string;
  produto_nome: string;
  quantidade: number;
  valor: number;
  status: string;
  cliente_id: string;
  cliente_nome: string;
  cliente_email: string;
  transacao_id?: string;
  provider_order_id?: string;
}

// Interface para detalhes completos de um pedido
export interface PedidoDetalhado extends Pedido {
  logs?: Array<{
    id: string;
    level: string;
    message: string;
    data?: any;
    created_at: Date;
  }>;
  cliente?: {
    id: string;
    nome: string;
    email: string;
  };
  metadata?: any;
  provider_response?: any;
  target_username?: string;
  target_url?: string;
}

// Interface para representar um provedor
export interface Provedor {
  id: string;
  nome: string;
  descricao?: string;
  ativo: boolean;
  logo_url?: string;
  website?: string;
  criado_em: Date;
}

// Função para obter pedidos recentes
export async function obterPedidosRecentes(limite: number = 5): Promise<Pedido[]> {
  // Se estiver em build, retornar dados vazios
  if (process.env.NEXT_PHASE === 'phase-production-build') {
    console.log('Pulando obtenção de pedidos recentes durante o build');
    return [];
  }

  try {
    // Usar a função do analyticsService para obter pedidos recentes
    const result = await obterPedidos({}, 1, limite);
    
    // Mapear para o formato esperado pelo painel
    return result.pedidos.map((pedido: AnalyticsPedido) => ({
      id: pedido.order_id,
      data_criacao: new Date(pedido.created_at),
      provedor_id: pedido.provider_id || '',
      provedor_nome: 'Provedor', // Pode ser melhorado com uma tabela de provedores
      produto_id: pedido.service_id || '',
      produto_nome: 'Serviço', // Pode ser melhorado com uma tabela de serviços
      quantidade: pedido.quantity || 0,
      valor: pedido.total_amount || 0,
      status: pedido.status || 'desconhecido',
      cliente_id: pedido.user_id || '',
      cliente_nome: pedido.customer_name || 'Cliente',
      cliente_email: pedido.customer_email || '',
      transacao_id: pedido.transaction_id || '',
      provider_order_id: pedido.external_service_id || ''
    }));
  } catch (error) {
    console.error('Erro ao obter pedidos recentes:', error);
    return [];
  }
}

// Verificar conexão com o banco de dados
if (ordersPool) {
  ordersPool.on('error', (err) => {
    console.error('Erro inesperado na conexão com o pool PostgreSQL:', err);
    // Tenta reconectar após um erro
    if (err.message.includes('connection terminated') || err.message.includes('connection reset')) {
      console.log('Tentando reconectar ao banco de dados...');
    }
  });
}

// Função para testar conexão com o banco
export async function testarConexaoDB(): Promise<{ success: boolean; pool: Pool | null }> {
  // Se não estiver no servidor ou em modo de build, retorna sucesso sem pool
  if (!isServerSide || process.env.NEXT_PHASE === 'phase-production-build') {
    console.log('Pulando verificação de conexão durante build ou no cliente');
    return { success: true, pool: null };
  }

  if (!ordersPool) {
    console.error('Pool de conexão não foi inicializado');
    return { success: false, pool: null };
  }

  let client;
  try {
    client = await ordersPool.connect();
    
    // Fazer uma query simples de teste
    await client.query('SELECT 1 AS test');
    
    // Verificar tabelas disponíveis
    const tablesQuery = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `);
    
    console.log('Tabelas disponíveis:', tablesQuery.rows.map(r => r.table_name).join(', '));
    
    console.log('Conexão com o banco de dados estabelecida com sucesso.');
    return { success: true, pool: ordersPool };
  } catch (error) {
    console.error('Erro ao conectar com o banco de dados:', error);
    return { success: false, pool: null };
  } finally {
    if (client) {
      client.release();
    }
  }
}

// Função auxiliar para mapear pedidos para o formato esperado
export function mapearPedidosParaFormato(pedidosData: any[], total: number): { pedidos: Pedido[]; total: number } {
  const pedidos = pedidosData.map((pedido) => ({
    id: pedido.order_id,
    data_criacao: new Date(pedido.created_at),
    provedor_id: pedido.provider_id || '',
    provedor_nome: 'Provedor', // Pode ser melhorado com uma tabela de provedores
    produto_id: pedido.service_id || '',
    produto_nome: 'Serviço', // Pode ser melhorado com uma tabela de serviços
    quantidade: pedido.quantity || 0,
    valor: pedido.total_amount || 0,
    status: pedido.status || 'desconhecido',
    cliente_id: pedido.user_id || '',
    cliente_nome: pedido.customer_name || 'Cliente',
    cliente_email: pedido.customer_email || '',
    transacao_id: pedido.transaction_id || '',
    provider_order_id: pedido.external_service_id || ''
  }));

  return { pedidos, total };
}

// Função para buscar pedidos com filtros
export async function buscarPedidos(
  filtros: {
    status?: string;
    provedor?: string;
    dataInicio?: string;
    dataFim?: string;
    termoBusca?: string;
  } = {},
  pagina = 1,
  limite = 10
): Promise<{ pedidos: Pedido[]; total: number }> {
  try {
    // Usar a função do analyticsService para obter pedidos com filtros
    const result = await obterPedidos({
      status: filtros.status,
      dataInicio: filtros.dataInicio,
      dataFim: filtros.dataFim,
      termoBusca: filtros.termoBusca
    }, pagina, limite);
    
    // Mapear para o formato esperado pelo painel
    return mapearPedidosParaFormato(result.pedidos, result.total);
  } catch (error) {
    console.error('Erro ao buscar pedidos:', error);
    return { pedidos: [], total: 0 };
  }
}

// Função para buscar um pedido específico
export async function buscarPedidoPorId(id: string): Promise<PedidoDetalhado | null> {
  try {
    // Usar a função do analyticsService para obter o pedido específico
    const pedido = await obterPedidoPorId(id);
    
    if (!pedido) {
      return null;
    }
    
    // Mapear para o formato esperado pelo painel
    return {
      id: pedido.order_id,
      data_criacao: new Date(pedido.created_at),
      provedor_id: pedido.provider_id || '',
      provedor_nome: 'Provedor', // Pode ser melhorado com uma tabela de provedores
      produto_id: pedido.service_id || '',
      produto_nome: 'Serviço', // Pode ser melhorado com uma tabela de serviços
      quantidade: pedido.quantity || 0,
      valor: pedido.total_amount || 0,
      status: pedido.status || 'desconhecido',
      cliente_id: pedido.user_id || '',
      cliente_nome: pedido.customer_name || 'Cliente',
      cliente_email: pedido.customer_email || '',
      transacao_id: pedido.transaction_id || '',
      provider_order_id: pedido.external_service_id || '',
      target_url: pedido.target_url || '',
      target_username: pedido.target_username || '',
      cliente: {
        id: pedido.user_id || '',
        nome: pedido.customer_name || 'Cliente',
        email: pedido.customer_email || ''
      }
    };
  } catch (error) {
    console.error(`Erro ao buscar pedido com ID ${id}:`, error);
    return null;
  }
}

// Função para obter estatísticas de pedidos
export async function obterEstatisticasPedidos(): Promise<any> {
  try {
    // Consultar estatísticas do banco Analytics
    const query = `
      SELECT 
        COUNT(*) as total_pedidos,
        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as pedidos_concluidos,
        SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pedidos_pendentes,
        SUM(CASE WHEN status = 'processing' THEN 1 ELSE 0 END) as pedidos_processando,
        SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as pedidos_falhos,
        SUM(total_amount) as valor_total
      FROM analytics_orders
    `;
    
    const result = await ordersPool.query(query);
    
    return result.rows[0] || {
      total_pedidos: 0,
      pedidos_concluidos: 0,
      pedidos_pendentes: 0,
      pedidos_processando: 0,
      pedidos_falhos: 0,
      valor_total: 0
    };
  } catch (error) {
    console.error('Erro ao obter estatísticas de pedidos:', error);
    return {
      total_pedidos: 0,
      pedidos_concluidos: 0,
      pedidos_pendentes: 0,
      pedidos_processando: 0,
      pedidos_falhos: 0,
      valor_total: 0
    };
  }
}

// Função para obter pedidos por período (para gráficos)
export async function obterPedidosPorPeriodo(dias: number = 7): Promise<any[]> {
  try {
    // Consultar pedidos por período do banco Analytics
    const query = `
      SELECT 
        DATE(created_at) as data,
        COUNT(*) as quantidade,
        SUM(total_amount) as valor_total
      FROM analytics_orders
      WHERE created_at >= NOW() - INTERVAL '${dias} days'
      GROUP BY DATE(created_at)
      ORDER BY data
    `;
    
    const result = await ordersPool.query(query);
    
    return result.rows;
  } catch (error) {
    console.error('Erro ao obter pedidos por período:', error);
    return [];
  }
}

// Função para obter os principais provedores
export async function obterProvedores(): Promise<Provedor[]> {
  try {
    // Consultar provedores do banco Analytics
    const query = `
      SELECT DISTINCT
        provider_id as id,
        'Provedor ' || provider_id as nome,
        'Descrição do provedor' as descricao,
        true as ativo,
        NULL as logo_url,
        NULL as website,
        NOW() as criado_em
      FROM analytics_orders
      WHERE provider_id IS NOT NULL
      LIMIT 10
    `;
    
    const result = await ordersPool.query(query);
    
    return result.rows.map(row => ({
      id: row.id,
      nome: row.nome,
      descricao: row.descricao,
      ativo: row.ativo,
      logo_url: row.logo_url,
      website: row.website,
      criado_em: new Date(row.criado_em)
    }));
  } catch (error) {
    console.error('Erro ao obter provedores:', error);
    return [];
  }
}
